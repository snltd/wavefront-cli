#!/usr/bin/env ruby

require 'pathname'
require 'docopt'
require 'rest-client'

# uncomment for development
$LOAD_PATH.<< Pathname.new(__FILE__).dirname.realpath.parent + 'lib'
$LOAD_PATH.<< Pathname.new(__FILE__).dirname.realpath.parent.parent + 'wavefront-sdk' + 'lib'

require 'wavefront-cli/version'
require 'wavefront-cli/opt_handler'
include WavefrontCli::Constants

# Mostly we can derive the SDK class from the command, but there's
# some CamelCasing to deal with
#
class_names = {
  integration: 'CloudIntegration',
  link: 'ExternalLink',
  window: 'MaintenanceWindow',
  savedsearch: 'SavedSearch',
}

def sanitize_keys(hash)
  hash.each_with_object({}) { |(k, v), aggr| aggr[k.delete('-').to_sym] = v }
end

WF = Pathname.new(__FILE__).basename

# If we are a normal user, look for wavefront config in our home
# directory; if not, look in /etc
#
conf_file = if ENV['HOME']
              Pathname.new(ENV['HOME']) + '.wavefront'
            else
              Pathname.new('/etc/wavefront/client.conf')
            end

# The global_opts are available in every command.
#
global_opts = %(
Global options:
  -c, --config=FILE    path to configuration file [#{conf_file}]
  -P, --profile=NAME   profile in configuration file [#{DEFAULT_OPTS[:profile]}]
  -D, --debug          enable debug mode
  -n, --noop           don't perform API calls
  -V, --verbose        be verbose
  -h, --help           show this message
)

# options common to nearly all commands
#
CMN = '[-DnV] [-c file] [-P profile] [-E endpoint]
             [-t token]'

# The following hash contains the docopt strings defining all the
# commands we offer. They must include the global_opts.
#
usage = {

alert: %(
Usage:
  #{WF} alert list #{CMN} [-b] [-f format] [-o offset] [-L limit]
  #{WF} alert describe #{CMN} [-f format] [-v version] <id>
  #{WF} alert delete #{CMN} <id>
  #{WF} alert undelete #{CMN} <id>
  #{WF} alert history #{CMN} [-f format] [-S start] [-L limit] <id>
  #{WF} alert import #{CMN} <file>
  #{WF} alert snooze #{CMN} [-t time] <id>
  #{WF} alert unsnooze #{CMN} <id>
  #{WF} alert tags #{CMN} [-f format] <id>
  #{WF} alert tag set #{CMN} <id> <tag>...
  #{WF} alert tag clear #{CMN} <id>
  #{WF} alert tag add #{CMN} <id> <tag>
  #{WF} alert tag delete #{CMN} <id> <tag>
  #{WF} alert summary #{CMN}
  #{WF} alert --help
#{global_opts}
Options:
  -E, --endpoint=URI       cluster endpoint [#{DEFAULT_OPTS[:endpoint]}]
  -t, --token=TOKEN        Wavefront authentication token
  -b, --brief              only list alert names and IDs
  -v, --version=INTEGER    describe only this version of alert
  -o, --offset=n           start from nth alert
  -L, --limit=COUNT        number of alerts to list
  -T, --time=SECONDS       how long to snooze (default 3600)
  -f, --alertformat=STRING output format
  -X, --private=TAG        retrieve only alerts with named private tags,
                           comma delimited.
  -Z, --shared=TAG         retrieve only alerts with named shared tags,
                           comma delimited.
),
integration: %(
Usage:
  #{WF} integration list #{CMN} [-b] [-f format] [-o offset] [-L limit]
  #{WF} integration describe #{CMN} [-f format] <id>
  #{WF} integration delete #{CMN} <id>
  #{WF} integration undelete #{CMN} <id>
  #{WF} integration --help
#{global_opts}
Options:
  -E, --endpoint=URI             cluster endpoint [#{DEFAULT_OPTS[:endpoint]}]
  -t, --token=TOKEN              Wavefront authentication token
  -b, --brief                    only list integration names and IDs
  -o, --offset=n                 start from nth integration
  -L, --limit=COUNT              number of integrations to list
  -f, --integrationformat=STRING output format
),
dashboard: %(
Usage:
  #{WF} dashboard list #{CMN} [-b] [-f format] [-o offset] [-L limit]
  #{WF} dashboard describe #{CMN} [-f format] [-v version] <id>
  #{WF} dashboard import #{CMN} [-f format] [-F] <file>
  #{WF} dashboard delete #{CMN} <id>
  #{WF} dashboard undelete #{CMN} <id>
  #{WF} dashboard history #{CMN} [-b] [-f format] [-o offset] [-L limit] <id>
  #{WF} dashboard tags #{CMN} [-f format] <id>
  #{WF} dashboard tag set #{CMN} <id> <tag>...
  #{WF} dashboard tag clear #{CMN} <id>
  #{WF} dashboard tag add #{CMN} <id> <tag>
  #{WF} dashboard tag delete #{CMN} <id> <tag>
  #{WF} dashboard --help
#{global_opts}
Options:
  -E, --endpoint=URI       cluster endpoint [#{DEFAULT_OPTS[:endpoint]}]
  -t, --token=TOKEN        Wavefront authentication token
  -b, --brief              only list dashboard names and IDs
  -o, --offset=n           start list from nth dashboard or revision
  -L, --limit=COUNT        number of dashboards or revisions to list
  -v, --version=INTEGER    version of dashboard
  -f, --dashformat=STRING  output format
),

event: %(
Usage:
  #{WF} event list #{CMN} [-b] [-f format] [-s start] [-e end] [-L limit] [-o offset]
  #{WF} event describe #{CMN} [-f format] <id>
  #{WF} event create #{CMN} [-d description] [-s time] [-i | -e time]
           [-l severity] [-T type] [-H host...] [-N] <event>
  #{WF} event close #{CMN} <id>
  #{WF} event delete #{CMN} <id>
  #{WF} event update #{CMN} <key=value> <id>
  #{WF} event tags #{CMN} [-f format] <id>
  #{WF} event tag set #{CMN} <id> <tag>...
  #{WF} event tag clear #{CMN} <id>
  #{WF} event tag add #{CMN} <id> <tag>
  #{WF} event tag delete #{CMN} <id> <tag>
  #{WF} event show [-D]
  #{WF} event --help
#{global_opts}
Options:
  -E, --endpoint=URI        cluster endpoint [#{DEFAULT_OPTS[:endpoint]}]
  -t, --token=TOKEN         Wavefront authentication token
  -b, --brief               only list event names and IDs
  -o, --offset=n            start list from nth event
  -L, --limit=COUNT         number of events to list
  -s, --start=TIME          time at which event/window begins
  -e, --end=TIME            time at which even/window  ends
  -l, --severity=SEVERITY   severity of event (#{EVENT_LEVELS.join(', ')})
  -i, --instant             create an instantaneous event
  -T, --type=TYPE           type of event
  -d, --desc=STRING         description of event
  -H, --host=STRING         source to which event applies
  -N, --nostate             do not create a local file recording the event
  -f, --eventformat=STRING  output format

View events in detail using the 'ts' command with the 'events()' function.
),
link: %(
Usage:
  #{WF} link list #{CMN} [-b] [-f format] [-o offset] [-L limit]
  #{WF} link describe #{CMN} [-f format] <id>
  #{WF} link delete #{CMN} <id>
  #{WF} link --help
#{global_opts}
Options:
  -E, --endpoint=URI       cluster endpoint [#{DEFAULT_OPTS[:endpoint]}]
  -t, --token=TOKEN        Wavefront authentication token
  -b, --brief              only list external link names and IDs
  -o, --offset=n           start from nth external link
  -L, --limit=COUNT        number of external link to list
  -f, --linkformat=STRING  output format
),
window: %(
Usage:
  #{WF} window list #{CMN} [-b] [-f format] [-o offset] [-L limit]
  #{WF} window describe #{CMN} [-f format] <id>
  #{WF} window delete #{CMN} <id>
  #{WF} window --help
#{global_opts}
Options:
  -E, --endpoint=URI         cluster endpoint [#{DEFAULT_OPTS[:endpoint]}]
  -t, --token=TOKEN          Wavefront authentication token
  -b, --brief                only list maintenance window names and IDs
  -o, --offset=n             start from nth maintenance window
  -L, --limit=COUNT          number of maintenance windows to list
  -f, --windowformat=STRING  output format
),
message: %(
Usage:
  #{WF} message list #{CMN} [-b] [-f format] [-o offset] [-L limit]
  #{WF} message mark #{CMN} [-f format] <id>
#{global_opts}
Options:
  -E, --endpoint=URI          cluster endpoint [#{DEFAULT_OPTS[:endpoint]}]
  -t, --token=TOKEN           Wavefront authentication token
  -b, --brief                 only list message names and IDs
  -o, --offset=n              start from nth message
  -L, --limit=COUNT           number of messages to list
  -f, --messageformat=STRING  output format
),
metric: %(
Usage:
  #{WF} metric describe #{CMN} [-f format] [-o offset] [-g glob...] <metric>
#{global_opts}
Options:
  -E, --endpoint=URI         cluster endpoint [#{DEFAULT_OPTS[:endpoint]}]
  -t, --token=TOKEN          Wavefront authentication token
  -o, --offset=STRING        value to start from if results > 1000
  -g, --glob=STRING          return sources matching this pattern
  -f, --metricformat=STRING  output format
),
proxy: %(
Usage:
  #{WF} proxy list #{CMN} [-b] [-f format] [-o offset] [-L limit]
  #{WF} proxy describe #{CMN} [-f format] <id>
  #{WF} proxy delete #{CMN} <id>
  #{WF} proxy undelete #{CMN} <id>
  #{WF} proxy rename #{CMN} <id> <name>
  #{WF} proxy --help
#{global_opts}
Options:
  -E, --endpoint=URI        cluster endpoint [#{DEFAULT_OPTS[:endpoint]}]
  -t, --token=TOKEN         Wavefront authentication token
  -b, --brief               only list proxy names and IDs
  -o, --offset=n            start from nth proxy
  -f, --proxyformat=STRING  output format
  -L, --limit=COUNT         number of proxies to list
),
query: %(
Usage:
  #{WF} query #{CMN} -g granularity -s time [-e time] [-f format]
           [-ivO] [-S mode] [-n name] [-p points] <query>
  #{WF} query raw #{CMN} [-H host] [-s time] [-e time]
           [-f format] <metric>
#{global_opts}
Options:
  -E, --endpoint=URI        cluster endpoint [#{DEFAULT_OPTS[:endpoint]}]
  -t, --token=TOKEN         Wavefront authentication token
  -g, --granularity=STRING  query granularity (d, h, m, or s)
  -s, --start=TIME          start of query window
  -e, --end=TIME            end of query window
  -N, --name=STRING         name identifying query
  -p, --points=INTEGER      maximum number of points to return
  -i, --inclusive           include matching series with no points inside
                            the query window
  -v, --events              include events for matching series
  -S, --summarize=STRING    summarization strategy for bucketing points
                            (mean, median, min, max, sum, count, last,
                            first)
  -O, --obsolete            include metrics unreported for > 4 weeks
  -H, --host=STRING         host or source to query on
  -f, --queryformat=STRING  output format
),
savedsearch: %(
Usage:
  #{WF} savedsearch list #{CMN} [-b] [-f format] [-o offset] [-L limit]
  #{WF} savedsearch describe #{CMN} [-f format] <id>
  #{WF} savedsearch delete #{CMN} <id>
  #{WF} savedsearch --help
#{global_opts}
Options:
  -E, --endpoint=URI        cluster endpoint [#{DEFAULT_OPTS[:endpoint]}]
  -t, --token=TOKEN         Wavefront authentication token
  -b, --brief               only list saved search names and IDs
  -o, --offset=n            start from nth saved search
  -L, --limit=COUNT         number of saved searches to list
  -f, --proxyformat=STRING  output format
),
source: %(
Usage:
  #{WF} source list #{CMN} [-b] [-f format] [-o offset] [-L limit]
  #{WF} source describe #{CMN} [-f format] [-v version] <id>
  #{WF} source delete #{CMN} <id>
  #{WF} source tags #{CMN} [-f format] <id>
  #{WF} source tag set #{CMN} <id> <tag>...
  #{WF} source tag clear #{CMN} <id>
  #{WF} source tag add #{CMN} <id> <tag>
  #{WF} source tag delete #{CMN} <id> <tag>
  #{WF} source --help
#{global_opts}
Options:
  -E, --endpoint=URI         cluster endpoint [#{DEFAULT_OPTS[:endpoint]}]
  -t, --token=TOKEN          Wavefront authentication token
  -b, --brief                only list source names and descriptions
  -o, --offset=n             start list from nth source
  -L, --limit=COUNT          number of sources to list
  -v, --version=INTEGER      version of dashboard
  -f, --sourceformat=STRING  output format
),
user: %(
Usage:
  #{WF} user list #{CMN} [-b]
  #{WF} user describe #{CMN} [-f format] <user>
  #{WF} user delete #{CMN} <user>
  #{WF} user grant #{CMN} <privilege> <user>
  #{WF} user revoke #{CMN} <privilege> <user>
  #{WF} user --help
#{global_opts}
Options:
  -E, --endpoint=URI        cluster endpoint [#{DEFAULT_OPTS[:endpoint]}]
  -t, --token=TOKEN         Wavefront authentication token
  -b, --brief               only list alert names and IDs
  -f, --userformat=STRING   output format
),
webhook: %(
Usage:
  #{WF} webhook list #{CMN} [-b] [-f format] [-o offset] [-L limit]
  #{WF} webhook describe #{CMN} [-f format] <webhook>
  #{WF} webhook delete #{CMN} <webhook>
  #{WF} webhook --help
#{global_opts}
Options:
  -E, --endpoint=URI        cluster endpoint [#{DEFAULT_OPTS[:endpoint]}]
  -t, --token=TOKEN         Wavefront authentication token
  -b, --brief               only list alert names and IDs
  -o, --offset=n            start list from nth webhook
  -L, --limit=COUNT         number of webhooks to list
  -f, --userformat=STRING   output format
),

write: %(
Usage:
  #{WF} write point [-DnV] [-c file] [-P profile] [-E proxy] [-t time]
           [-p port] [-H host] [-n] [-T tag...] <metric> <value>
  #{WF} write file [-DnV] [-c file] [-P profile] [-E proxy] [-H host]
           [-p port] [-n] [-F format] [-m metric] [-T tag...] <file>
  #{WF} write --help
#{global_opts}
Options:
  -E, --proxy=URI            proxy endpoint [#{DEFAULT_OPTS[:proxy]}]
  -t, --time=TIME            time of data point (omit to use current time)
  -H, --host=STRING          source host [#{DEFAULT_OPTS[:host]}]
  -p, --port=INT             Wavefront proxy port [#{DEFAULT_OPTS[:port]}]
  -T, --tag=TAG              point tag in key=value form
  -F, --infileformat=STRING  format of input file or stdin [#{DEFAULT_OPTS[:infileformat]}]
  -m, --metric=STRING        the metric path to which contents of a
                             file will be assigned. If the file
                             contains a metric name, the two will be
                             concatenated

Files are whitespace separated, and fields can be defined with the -F
option.  Use 't' for timestamp; 'm' for metric name; 'v' for value
and 'T' for tags. Put 'T' last.
),

default: %(
Wavefront CLI

Usage:
  #{WF} [options] command [options]
  #{WF} --version
  #{WF} --help

Commands:
  alert         view and manage alerts
  integration   view and manage cloud integrations
  dashboard     view and manage dashboards
  event         view, manage, open, and close events
  link          view and manage external links
  message       view and mark as read user messages
  metric        view metric details
  proxy         view and manage Wavefront proxies
  query         run timeseries queries
  savedsearch   view and manage saved searches
  source        view and manage source tags and descriptions
  user          view and manage Wavefront users
  window        view and manage maintenance windows
  webhook       view and manage webhooks
  write         send data points to a Wavefront proxy

Use '#{WF} <command> --help' for further information.)
}

# Parse the input. The first Docopt.docopt handles the default
# options, the second works on the command.
#
begin
  opts = Docopt.docopt(usage[:default], version: WF_CLI_VERSION)
rescue Docopt::Exit => e

  cmd = ARGV.empty? ? nil : ARGV.first.to_sym

  if usage.keys.include?(cmd)
    begin
      opts = sanitize_keys(Docopt.docopt(usage[cmd]))
    rescue Docopt::Exit => e
      abort e.message # command help
    end
  else
    abort e.message # default help
  end
end

opts = WavefrontCli::OptHandler.new(conf_file, opts).opts

if opts[:debug]
  require 'pp'
  puts 'Combined options:'
  pp opts
end

if class_names.key?(cmd.to_sym)
  klass_name = class_names[cmd.to_sym]
  klass_file = klass_name.downcase
else
  klass_name = cmd.capitalize
  klass_file = cmd
end

begin
  require "wavefront-cli/#{klass_file}"
  klass = Object.const_get('WavefrontCli').const_get(klass_name)
  cli = klass.new(opts)
rescue
  abort 'Fatal error. Unsupported command.'
end

begin
  cli.validate_opts
  cli.run
rescue => e
  #if e.class == RestClient::MethodNotAllowed
    #STDERR.puts "#{cmd} query failed. #{e}"
  #elsif e.class.ancestors.include?(RestClient::ExceptionWithResponse)
    #STDERR.puts "#{cmd} query failed. #{e.http_code}: " +
                #JSON.parse(e.response)['status']['message'] + '.'
  #else
    STDERR.puts "general error: #{e}"
    STDERR.puts "re-run with '-D' for stack trace." unless opts[:debug]
  #end

  STDERR.puts "Backtrace:\n\t#{e.backtrace.join("\n\t")}" if opts[:debug]
  exit 1
end
